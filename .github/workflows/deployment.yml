# workflow name
name: Deploy Project
# an event that trigger workflow
# use bracket to specify multiple events
on:
  workflow_dispatch:
  push:
      # push event can have filters
      branches:
        # The ** wildcard matches any character including slash (/) in branch and tag names.
        # ex: feature/beta-a/my-branch feature/your-branch
        # See: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
        - feature/**
        - release/**
env:
  DB_URL: localhost
  # this is example how to use secret. the value are stored in the github "settings/secret and variable" menu
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
# jobs is what process should this workflow do
jobs: 
  # the job name
  test:
    # specified the runners machine or the environtment will use to run a job
    runs-on: ubuntu-latest
    steps:
    # Github actions required to download our codes/project from the repository
    - name: Pull/download the codes
      # uses is a key to using github actions
      # for more info about checkout actions, please visit this page https://github.com/marketplace/actions/checkout
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Compile
      run: mvn  --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=false -DdeployAtEnd=false -Drevision=$VERSION clean compile
    - name: Test
      run: mvn  --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=false -DdeployAtEnd=false -Drevision=$VERSION clean verify
  # if second job presented in the workflow, it will be run parallel with the first job
  build:
    needs: test
    runs-on: ubuntu-latest
    # outputs is a keyword to define the output from this job and can be used in other jobs
    outputs:
      app_name: ${{ steps.get-app-name.outputs.app_name }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Pull/download the codes
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Package
        run: mvn  --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=false -DdeployAtEnd=false -Drevision=$VERSION clean package -DskipTests=true
      - name: Extract version from pom.xml
        id: get-version # this is step id required if we want to use the "output" result from this step
        # echo "VERSION=$VERSION" >> $GITHUB_ENV means to set the VERSION to github env (works only on same job)
        # echo "version=$VERSION" >> $GITHUB_OUTPUT means to set the version to github output (works on different job) see the output keywords above
        # to uses the github output, please use this script ${{ steps.get-version.outputs.version }}
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Extract App Name from pom.xml
        id: get-app-name
        run: |
          APP_NAME=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-app-name.outputs.app_name }}-${{ steps.get-version.outputs.version }}
          path: target/*.jar
  deploy:
    # by using needs, we can specify which job should be completed first before this job run
    needs: build
    runs-on: [self-hosted, linux, X64]
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.app_name }}-${{ needs.build.outputs.version }}
    - name: Check download content
      run: pwd & ls -lsta
    - name: Running Jar
      run: |
        pkill -f ${{ needs.build.outputs.app_name }}-*\.jar || true
        nohup java -jar ${{ needs.build.outputs.app_name }}-${{ needs.build.outputs.version }}.jar -DDB_URL=$DB_URL -DDB_USER=$DB_USER -DDB_PASSWORD=$DB_PASSWORD > app.log 2>&1 &